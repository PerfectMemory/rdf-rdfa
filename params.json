{"tagline":"Ruby RDFa reader/writer for RDF.rb.","body":"# RDF::RDFa reader/writer\r\n\r\n[RDFa][RDFa 1.1 Core] parser for RDF.rb.\r\n\r\n## DESCRIPTION\r\nRDF::RDFa is an RDFa reader and writer for Ruby using the [RDF.rb][RDF.rb] library suite.\r\n\r\n## FEATURES\r\nRDF::RDFa parses [RDFa][RDFa 1.1 Core] into statements or triples.\r\n\r\n* Fully compliant RDFa 1.1 parser.\r\n* Template-based Writer to generate XHTML+RDFa.\r\n  * Writer uses user-replacable [Haml][Haml]-based templates to generate RDFa.\r\n* If available, Uses Nokogiri for parsing HTML/SVG, falls back to REXML otherwise (and for JRuby)\r\n* [RDFa tests][RDFa-test-suite] use SPARQL for most tests due to Rasqal limitations. Other tests compare directly against N-triples.\r\n\r\nInstall with 'gem install rdf-rdfa'\r\n\r\n### Important changes from previous versions\r\nRDFa is an evolving standard, undergoing some substantial recent changes partly due to perceived competition\r\nwith Microdata. As a result, the RDF Webapps working group is currently looking at changes in the processing model for RDFa. These changes are now being tracked in {RDF::RDFa::Reader}:\r\n\r\n#### RDFa 1.1 Lite\r\nThis version fully supports the limited syntax of [RDFa Lite 1.1][]. This includes the ability to use\r\n@property exclusively.\r\n\r\n#### Remove RDFa Profiles\r\nRDFa Profiles were a mechanism added to allow groups of terms and prefixes to be defined in an external resource and loaded to affect the processing of an RDFa document. This introduced a problem for some implementations needing to perform a cross-origin GET in order to retrieve the profiles. The working group elected to drop support for user-defined RDFa Profiles (the default profiles defined by RDFa Core and host languages still apply) and replace it with an inference regime using vocabularies. Parsing of @profile has been removed from this version.\r\n\r\n#### Vocabulary Expansion\r\nOne of the issues with vocabularies was that they discourage re-use of existing vocabularies when terms from several vocabularies are used at the same time. As it is common (encouraged) for RDF vocabularies to form sub-class and/or sub-property relationships with well defined vocabularies, the RDFa vocabulary expansion mechanism takes advantage of this.\r\n\r\nAs an optional part of RDFa processing, an RDFa processor will perform limited\r\n[OWL 2 RL Profile entailment](http://www.w3.org/TR/2009/REC-owl2-profiles-20091027/#Reasoning_in_OWL_2_RL_and_RDF_Graphs_using_Rules),\r\nspecifically rules prp-eqp1, prp-eqp2, cax-sco, cax-eqc1, and\r\ncax-eqc2. This causes sub-classes and sub-properties of type and property IRIs to be added\r\nto the output graph.\r\n\r\n{RDF::RDFa::Reader} implements this using the `#expand` method, which looks for `rdfa:usesVocabulary` properties within the output graph and performs such expansion. See an example in the usage section.\r\n\r\n#### RDF Collections (lists)\r\nOne significant RDF feature missing from RDFa was support for ordered collections, or lists. RDF supports this with special properties `rdf:first`, `rdf:rest`, and `rdf:nil`, but other RDF languages have first-class support for this concept. For example, in [Turtle][Turtle], a list can be defined as follows:\r\n\r\n    [ a schema:MusicPlayList;\r\n      schema:name \"Classic Rock Playlist\";\r\n      schema:numTracks 5;\r\n      schema:tracks (\r\n        [ a schema:MusicRecording; schema:name \"Sweet Home Alabama\";       schema:byArtist \"Lynard Skynard\"]\r\n        [ a schema:MusicRecording; schema:name \"Shook you all Night Long\"; schema:byArtist \"AC/DC\"]\r\n        [ a schema:MusicRecording; schema:name \"Sharp Dressed Man\";        schema:byArtist \"ZZ Top\"]\r\n        [ a schema:MusicRecording; schema:name \"Old Time Rock and Roll\";   schema:byArtist \"Bob Seger\"]\r\n        [ a schema:MusicRecording; schema:name \"Hurt So Good\";             schema:byArtist \"John Cougar\"]\r\n      )\r\n    ]\r\n\r\ndefines a playlist with an ordered set of tracks. RDFa adds the @inlist attribute, which is used to identify values (object or literal) that are to be placed in a list. The same playlist might be defined in RDFa as follows:\r\n\r\n    <div vocab=\"http://schema.org/\" typeof=\"MusicPlaylist\">\r\n      <span property=\"name\">Classic Rock Playlist</span>\r\n      <meta property=\"numTracks\" content=\"5\"/>\r\n\r\n      <div rel=\"tracks\" inlist=\"\">\r\n        <div typeof=\"MusicRecording\">\r\n          1.<span property=\"name\">Sweet Home Alabama</span> -\r\n          <span property=\"byArtist\">Lynard Skynard</span>\r\n         </div>\r\n\r\n        <div typeof=\"MusicRecording\">\r\n          2.<span property=\"name\">Shook you all Night Long</span> -\r\n          <span property=\"byArtist\">AC/DC</span>\r\n        </div>\r\n\r\n        <div typeof=\"MusicRecording\">\r\n          3.<span property=\"name\">Sharp Dressed Man</span> -\r\n          <span property=\"byArtist\">ZZ Top</span>\r\n        </div>\r\n\r\n        <div typeof=\"MusicRecording\">\r\n          4.<span property=\"name\">Old Time Rock and Roll</span>\r\n          <span property=\"byArtist\">Bob Seger</span>\r\n        </div>\r\n\r\n        <div typeof=\"MusicRecording\">\r\n          5.<span property=\"name\">Hurt So Good</span>\r\n          <span property=\"byArtist\">John Cougar</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\nThis basically does the same thing, but places each track in an rdf:List in the defined order.\r\n\r\n#### Property relations\r\nThe @property attribute has been updated to allow for creating URI references as well as object literals.\r\n\r\n1. If an element contains @property but no @rel, @datatype or @content and it contains a resource attribute (such as @href, @src, or @resource)\r\n    1. Generate an IRI object. Furthermore, sub-elements do not chain, i.e., the subject in effect when the @property is processed is also in effect for sub-elements.\r\n    2. Otherwise, generate a literal as before.\r\n\r\nFor example:\r\n\r\n    <a vocab=\"http://schema.org\" property=\"url\" href=\"http://example.com\">\r\n      <span property=\"title\">NBA Eastern Conference ...</span>\r\n    </a>\r\n\r\nresults in\r\n\r\n    <> schema:url <http://example.com>;\r\n       schema:title \"NBA Eastern Conference\".\r\n\r\n#### Magnetic @about/@typeof\r\nThe @typeof attribute has changed; previously, it always created a new subject, either using a resource from @about, @resource and so forth. This has long been a source of errors for people using RDFa. The new rules cause @typeof to bind to a subject if used with @about, otherwise, to an object, if either used alone, or in combination with some other resource attribute (such as @href, @src or @resource).\r\n\r\nFor example:\r\n\r\n  <div typeof=\"foaf:Person\" about=\"http://greggkellogg.net/foaf#me\">\r\n    <p property=\"name\">Gregg Kellogg</span>\r\n    <a rel=\"knows\" typeof=\"foaf:Person\" href=\"http://manu.sporny.org/#this\">\r\n      <span property=\"name\">Manu Sporny</span>\r\n    </a>\r\n  </div>\r\n\r\nresults in\r\n\r\n    <http://greggkellogg.net/foaf#me> a foaf:Person;\r\n      foaf:name \"Gregg Kellogg\";\r\n      foaf:knows <http://manu.sporny.org/#this> .\r\n    <http://manu.sporny.org/#this> a foaf:Person;\r\n      foaf:name \"Manu Sporny\" .\r\n\r\nNote that if the explicit @href is not present, i.e.,\r\n\r\n    <div typeof=\"foaf:Person\" about=\"http://greggkellogg.net/foaf#me\">\r\n      <p property=\"name\">Gregg Kellogg</span>\r\n      <a href=\"knows\" typeof=\"foaf:Person\">\r\n        <span property=\"name\">Manu Sporny</span>\r\n      </a>\r\n    </div>\r\n\r\nthis results in\r\n\r\n    <http://greggkellogg.net/foaf#me> a foaf:Person;\r\n      foaf:name \"Gregg Kellogg\";\r\n      foaf:knows [ \r\n            a foaf:Person;\r\n            foaf:name \"Manu Sporny\" \r\n      ].\r\n\r\n\r\n#### Property chaining\r\nIf used without @rel, but with @typeof and a resource attribute, @property will cause chaining to another object just like @rel. The effect of this and other changes is to allow pretty much all RDFa to be marked up using just @property; @rel/@rev is no longer required. Although, @rel and @rev have useful features that @property does not, so it's worth keeping them in your toolkit.\r\n\r\n#### Support for HTML5 `time` element\r\nThe `time` element allows the creation of a datatyped-literal based on the lexical scope of either the ``@datetime`` attribute, or the element content. We parse it according to xsd:date, xsd:time, xsd:dateTime, xsd:gYear, xsd:gYearMonth, and xsd:duration. If it matches none of these, a plain literal is emitted.\r\n\r\nThe `time` element is described in the WHATWG version of the [HTML5 spec](http://www.whatwg.org/specs/web-apps/current-work/multipage/text-level-semantics.html#the-time-element).\r\nThis is related to [RDFa ISSUE-97](http://www.w3.org/2010/02/rdfa/track/issues/97).\r\n\r\n#### Support for HTML5 `data` element\r\nThis is an alternate way of adding data using the `@value` property. Similar to `meta`\r\n\r\nThe `data` element is described in the WHATWG version of the [HTML5 spec](http://www.whatwg.org/specs/web-apps/current-work/multipage/text-level-semantics.html#the-data-element).\r\nThis is related to [RDFa ISSUE-113](http://www.w3.org/2010/02/rdfa/track/issues/113)\r\n\r\n## Usage\r\n\r\n### Reading RDF data in the RDFa format\r\n\r\n    graph = RDF::Graph.load(\"etc/doap.html\", :format => :rdfa)\r\n\r\n### Reading RDF data with vocabulary expansion\r\n\r\n    graph = RDF::Graph.load(\"etc/doap.html\", :format => :rdfa, :vocab_expansion => true)\r\n\r\nor\r\n\r\n    graph = RDF::RDFa::Reader.open(\"etc/doap.html\").expand\r\n\r\n### Reading Processor Graph\r\n\r\n    graph = RDF::Graph.load(\"etc/doap.html\", :format => :rdfa, :rdfagraph => :processor)\r\n\r\n### Reading Both Processor and Output Graphs\r\n\r\n    graph = RDF::Graph.load(\"etc/doap.html\", :format => :rdfa, :rdfagraph => [:output, :processor])\r\n\r\n### Writing RDF data using the XHTML+RDFa format\r\n\r\n    require 'rdf/rdfa'\r\n    \r\n    RDF::RDFa::Writer.open(\"etc/doap.html\") do |writer|\r\n      writer << graph\r\n    end\r\n\r\nNote that prefixes may be chained between Reader and Writer, so that the Writer will\r\nuse the same prefix definitions found during parsing:\r\n\r\n    prefixes = {}\r\n    graph = RDF::Graph.load(\"etc/doap.html\", :prefixes => prefixes)\r\n    puts graph.dump(:rdfa, :prefixes => prefixes)\r\n\r\n### Template-based Writer\r\nThe RDFa writer uses [Haml][Haml] templates for code generation. This allows fully\r\ncustomizable RDFa output in a variety of host languages.\r\nThe [default template]({RDF::RDFa::Writer::DEFAULT_HAML}) generates human readable HTML5\r\noutput. A [minimal template]({RDF::RDFa::Writer::MIN_HAML}) generates HTML, which is not\r\nintended for human consumption.\r\n\r\nTo specify an alternative Haml template, consider the following:\r\n\r\n    require 'rdf/rdfa'\r\n    \r\n    RDF::RDFa::Writer.buffer(:haml => RDF::RDFa::Writer::MIN_HAML) << graph\r\n\r\nThe template hash defines four Haml templates:\r\n\r\n*   _doc_: Document Template, takes an ordered list of _subject_s and yields each one to be rendered. From {RDF::RDFa::Writer#render_document}:\r\n\r\n    {include:RDF::RDFa::Writer#render_document}\r\n\r\n    This template takes locals _lang_, _prefix_, _base_, _title_ in addition to _subjects_\r\n    to create output similar to the following:\r\n      \r\n        <!DOCTYPE html>\r\n        <html prefix='xhv: http://www.w3.org/1999/xhtml/vocab#' xmlns='http://www.w3.org/1999/xhtml'>\r\n          <head>\r\n            <base href=\"http://example/\">\r\n            <title>Document Title</title>\r\n          </head>\r\n          <body>\r\n            ...\r\n          </body>\r\n        </html>\r\n      \r\n    Options passed to the Writer are used to supply _lang_ and _base_ locals.\r\n    _prefix_ is generated based upon prefixes found from the default profiles, as well\r\n    as those provided by a previous Reader. _title_ is taken from the first top-level subject\r\n    having an appropriate title property (as defined by the _heading\\_predicates_ option).\r\n\r\n*   _subject_: Subject Template, take a _subject_ and an ordered list of _predicate_s and yields\r\n    each _predicate_ to be rendered. From {RDF::RDFa::Writer#render_subject}:\r\n    \r\n    {include:RDF::RDFa::Writer#render_subject}\r\n    \r\n    The template takes locals _rel_ and _typeof_ in addition to _predicates_ and _subject_ to\r\n    create output similar to the following:\r\n    \r\n        <div resource=\"http://example/\">\r\n          ...\r\n        </div>\r\n\r\n    Note that if _typeof_ is defined, in this template, it will generate a textual description.\r\n    \r\n*   _property\\_value_: Property Value Template, used for predicates having a single value; takes\r\n    a _predicate_, and a single-valued Array of _objects_. From {RDF::RDFa::Writer#render_property}:\r\n\r\n    {include:RDF::RDFa::Writer#render_property}\r\n   \r\n    In addition to _predicate_ and _objects_, the template takes _inlist_ to indicate that the\r\n    property is part of an `rdf:List`.\r\n\r\n    Also, if the predicate is identified as a _heading predicate_ (via _:heading\\_predicates_ option),\r\n    it will generate a heading element, and may use the value as the document title.\r\n\r\n    Each _object_ is yielded to the calling block, and the result is rendered, unless nil.\r\n    Otherwise, rendering depends on the type of _object_. This is useful for recursive document\r\n    descriptions.\r\n\r\n    Creates output similar to the following:\r\n    \r\n        <div class='property'>\r\n          <span class='label'>\r\n            xhv:alternate\r\n          </span>\r\n          <a property='xhv:alternate' href='http://rdfa.info/feed/'>http://rdfa.info/feed/</a>\r\n        </div>\r\n    \r\n    Note the use of methods defined in {RDF::RDFa::Writer} useful in rendering the output.\r\n    \r\n*   _property\\_values_: Similar to _property\\_value_, but for predicates having more than one value.\r\n    Locals are identical to _property\\_values_, but _objects_ is expected to have more than one value. Described further in {RDF::RDFa::Writer#render_property}.\r\n    \r\n    In this case, and unordered list is used for output. Creates output similar to the following:\r\n    \r\n        <div class='property'>\r\n          <span class='label'>\r\n            xhv:bookmark\r\n          </span>\r\n          <ul rel='xhv:bookmark'>\r\n            <li>\r\n              <a href='http://rdfa.info/2009/12/12/oreilly-catalog-uses-rdfa/'>\r\n                http://rdfa.info/2009/12/12/oreilly-catalog-uses-rdfa/\r\n              </a>\r\n            </li>\r\n              <a href='http://rdfa.info/2010/05/31/new-rdfa-checker/'>\r\n                http://rdfa.info/2010/05/31/new-rdfa-checker/\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n    If _property\\_values_ does not exist, repeated values will be replecated\r\n    using _property\\_value_.\r\n* Type-specific templates.\r\n  To simplify generation of different output types, the\r\n  template may contain a elements indexed by a URI. When a subject with an rdf:type\r\n  matching that URI is found, subsequent Haml definitions will be taken from\r\n  the associated Hash. For example:\r\n  \r\n    {\r\n      :document => \"...\",\r\n      :subject => \"...\",\r\n      :property\\_value => \"...\",\r\n      :property\\_values => \"...\",\r\n      RDF::URI(\"http://schema.org/Person\") => {\r\n        :subject => \"...\",\r\n        :property\\_value => \"...\",\r\n        :property\\_values => \"...\",\r\n      }\r\n    }\r\n\r\n## Dependencies\r\n* [Ruby](http://ruby-lang.org/) (>= 1.9) or (>= 1.8.1 with [Backports][])\r\n* [RDF.rb](http://rubygems.org/gems/rdf) (>= 0.3.1)\r\n* [Haml](https://rubygems.org/gems/haml) (>= 3.0.0)\r\n* [HTMLEntities](https://rubygems.org/gems/htmlentities) ('>= 4.3.0')\r\n* Soft dependency on [Nokogiri](http://rubygems.org/gems/nokogiri) (>= 1.3.3)\r\n\r\n## Documentation\r\nFull documentation available on [Rubydoc.info][RDFa doc]\r\n\r\n### Principle Classes\r\n* {RDF::RDFa::Format}\r\n  * {RDF::RDFa::HTML}\r\n    Asserts :html format, text/html mime-type and .html file extension.\r\n  * {RDF::RDFa::XHTML}\r\n    Asserts :html format, application/xhtml+xml mime-type and .xhtml file extension.\r\n  * {RDF::RDFa::SVG}\r\n    Asserts :svg format, image/svg+xml mime-type and .svg file extension.\r\n* {RDF::RDFa::Reader}\r\n  * {RDF::RDFa::Reader::Nokogiri}\r\n  * {RDF::RDFa::Reader::REXML}\r\n* {RDF::RDFa::Context}\r\n* {RDF::RDFa::Expansion}\r\n* {RDF::RDFa::Writer}\r\n\r\n### Additional vocabularies\r\n* {RDF::PTR}\r\n* {RDF::RDFA}\r\n* {RDF::XHV}\r\n* {RDF::XML}\r\n* {RDF::XSI}\r\n\r\n## TODO\r\n* Add support for LibXML and REXML bindings, and use the best available\r\n* Consider a SAX-based parser for improved performance\r\n\r\n## Resources\r\n* [RDF.rb][RDF.rb]\r\n* [Distiller](http://rdf.greggkellogg.net/distiller)\r\n* [Documentation][RDFa doc]\r\n* [History]{file:History.markdown}\r\n* [RDFa 1.1 Core][RDFa 1.1 Core]\r\n* [XHTML+RDFa 1.1][XHTML+RDFa 1.1]\r\n* [RDFa-test-suite](http://rdfa.info/test-suite/              \"RDFa test suite\")\r\n\r\n## Author\r\n* [Gregg Kellogg](http://github.com/gkellogg) - <http://kellogg-assoc.com/>\r\n\r\n## Contributors\r\n* [Nicholas Humfrey](http://github.com/njh)\r\n\r\n## Contributing\r\n\r\n* Do your best to adhere to the existing coding conventions and idioms.\r\n* Don't use hard tabs, and don't leave trailing whitespace on any line.\r\n* Do document every method you add using [YARD][] annotations. Read the\r\n  [tutorial][YARD-GS] or just look at the existing code for examples.\r\n* Don't touch the `.gemspec`, `VERSION` or `AUTHORS` files. If you need to\r\n  change them, do so on your private branch only.\r\n* Do feel free to add yourself to the `CREDITS` file and the corresponding\r\n  list in the the `README`. Alphabetical order applies.\r\n* Do note that in order for us to merge any non-trivial changes (as a rule\r\n  of thumb, additions larger than about 15 lines of code), we need an\r\n  explicit [public domain dedication][PDD] on record from you.\r\n\r\n## License\r\n\r\nThis is free and unencumbered public domain software. For more information,\r\nsee <http://unlicense.org/> or the accompanying {file:UNLICENSE} file.\r\n\r\n## FEEDBACK\r\n\r\n* gregg@kellogg-assoc.com\r\n* <http://rubygems.org/rdf-rdfa>\r\n* <http://github.com/ruby-rdf/rdf-rdfa>\r\n* <http://lists.w3.org/Archives/Public/public-rdf-ruby/>\r\n\r\n[RDF.rb]:           http://rubygems.org/gems/rdf\r\n[YARD]:             http://yardoc.org/\r\n[YARD-GS]:          http://rubydoc.info/docs/yard/file/docs/GettingStarted.md\r\n[PDD]:              http://lists.w3.org/Archives/Public/public-rdf-ruby/2010May/0013.html\r\n[RDFa 1.1 Core]:    http://www.w3.org/TR/2012/PR-rdfa-core-20120508/                    \"RDFa 1.1 Core\"\r\n[RDFa Lite 1.1]:    http://www.w3.org/TR/2012/PR-rdfa-lite-20120508/                    \"RDFa Lite 1.1\"\r\n[XHTML+RDFa 1.1]:   http://www.w3.org/TR/2012/PR-xhtml-rdfa-20120508/                   \"XHTML+RDFa 1.1\"\r\n[HTML+RDFa 1.1]:    http://www.w3.org/TR/rdfa-in-html/                                   \"HTML+RDFa 1.1\"\r\n[RDFa-test-suite]:  http://rdfa.info/test-suite/                                        \"RDFa test suite\"\r\n[RDFa doc]:         http://rubydoc.info/github/ruby-rdf/rdf-rdfa/frames\r\n[Haml]:             http://haml-lang.com/\r\n[Turtle]:           http://www.w3.org/TR/2011/WD-turtle-20110809/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Rdf-rdfa"}